Django Shell for Django_project_D59


1.	Создать двух-трех пользователей (с помощью метода User.objects.create_user('username')).

	user_1 = User.objects.create_user(username ='Иван')
	user_2 = User.objects.create_user(username ='Сергей')
	user_3 = User.objects.create_user(username ='Рита')

2.	Создать два-три объекта модели Author, связанные с пользователями.

	author_1 = Author.objects.create(user=user_1)
	author_2 = Author.objects.create(user=user_2)
	author_3 = Author.objects.create(user=user_3)

3.	Добавить 4 категории в модель Category.

	category_1 = Category.objects.create(name = 'спорт')
	category_2 = Category.objects.create(name = 'политика')
	category_3 = Category.objects.create(name = 'образование')
	category_4 = Category.objects.create(name = 'природа')

4.	Добавить 2 статьи и 2 новости.

	post_1 = Post.objects.create(author = author_1, choice_field = 'AR', title = 'TITLE_1', content = 'CONTENT_1')
	post_2 = Post.objects.create(author = author_2, choice_field = 'AR', title = 'TITLE_2', content = 'CONTENT_2')
	post_3 = Post.objects.create(author = author_1, choice_field = 'NE', title = 'TITLE_3', content = 'CONTENT_3')
	post_4 = Post.objects.create(author = author_3, choice_field = 'NE', title = 'TITLE_4', content = 'CONTENT_4')

5.	Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

	post_1.category.add(category_1, category_2)
	post_1.save()
	post_2.category.add(category_3, category_4)
	post_2.save()
	post_3.category.add(category_1, category_3, category_4)
	post_3.save()
	post_4.category.add(category_3, category_4)
	post_4.save()

6.	Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

	comm_1 = Comment.objects.create(post = post_1, user = user_1, content = 'CONTENT_1')
	comm_2 = Comment.objects.create(post = post_2, user = user_2, content = 'CONTENT_2')
	comm_3 = Comment.objects.create(post = post_3, user = user_1, content = 'CONTENT_3')
	comm_4 = Comment.objects.create(post = post_4, user = user_2, content = 'CONTENT_4')
	comm_5 = Comment.objects.create(post = post_1, user = user_3, content = 'CONTENT_5')


7.	Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

	post_1.like()
	post_2.dislike()
	post_3.like()
	post_4.dislike()
	post_4.like()

	comm_1.like()
	comm_2.dislike()
	comm_3.like()
	comm_4.dislike()
	comm_1.dislike()
	comm_3.like()

8.	Обновить рейтинги пользователей->авторов.

	author_1.update_rating()
	author_2.update_rating()
	author_3.update_rating()

9. 	Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

	best_user = Author.objects.order_by('-rating').values('user__username', 'rating').first()
	best_user

10.	Вывести дату добавления, username автора, рейтинг, заголовок и отдельно превью лучшей статьи, основываясь на лайках/дислайках к 	этой статье.

	best_post = Post.objects.order_by('-rating').values('time_in', 'author__user__username', 'rating', 'title').first()
	best_post_for = Post.objects.order_by('-rating').first()
	best_post_for.preview()

11.	Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

	comments = Comment.objects.filter(post = best_post_for_preview)			
	comments
